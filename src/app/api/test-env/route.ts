import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç Test variables d\'environnement...');
    
    // V√©rifier toutes les variables d'environnement
    const envVars = {
      NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL,
      NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
      SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY,
    };

    // Logger les variables (masquer les cl√©s sensibles)
    console.log('Variables d\'environnement:');
    Object.entries(envVars).forEach(([key, value]) => {
      if (value) {
        if (key.includes('KEY')) {
          console.log(`‚úÖ ${key}: ${value.substring(0, 20)}...${value.substring(value.length - 10)}`);
        } else {
          console.log(`‚úÖ ${key}: ${value}`);
        }
      } else {
        console.log(`‚ùå ${key}: MANQUANT`);
      }
    });

    // V√©rifier la cr√©ation du client Supabase
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    const isServiceKeyValid = supabaseServiceKey && supabaseServiceKey.length > 0;
    
    console.log(`Cl√© service: ${isServiceKeyValid ? 'Pr√©sente' : 'Manquante'}`);
    
    // Test de cr√©ation du client
    let clientCreated = false;
    try {
      if (isServiceKeyValid) {
        const { createClient } = await import('@supabase/supabase-js');
        const testClient = createClient(
          envVars.NEXT_PUBLIC_SUPABASE_URL!,
          supabaseServiceKey,
          {
            auth: {
              autoRefreshToken: false,
              persistSession: false
            }
          }
        );
        clientCreated = !!testClient;
        console.log(`Client Supabase admin: ${clientCreated ? 'Cr√©√© avec succ√®s' : '√âchec cr√©ation'}`);
      }
    } catch (error) {
      console.error('Erreur cr√©ation client:', error);
    }

    return NextResponse.json({
      success: true,
      environment: process.env.NODE_ENV,
      variables: {
        NEXT_PUBLIC_SUPABASE_URL: envVars.NEXT_PUBLIC_SUPABASE_URL ? 'Configur√©' : 'Manquant',
        NEXT_PUBLIC_SUPABASE_ANON_KEY: envVars.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'Configur√©' : 'Manquant',
        SUPABASE_SERVICE_ROLE_KEY: envVars.SUPABASE_SERVICE_ROLE_KEY ? 'Configur√©' : 'Manquant',
      },
      checks: {
        serviceKeyPresent: isServiceKeyValid,
        clientCreated: clientCreated,
      }
    });

  } catch (error: any) {
    console.error('‚ùå Erreur test environnement:', error);
    return NextResponse.json({
      error: error.message || 'Erreur lors du test'
    }, { status: 500 });
  }
} 