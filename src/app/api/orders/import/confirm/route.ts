import { NextRequest, NextResponse } from 'next/server';
import { supabase, supabaseAdmin } from '../../../../../lib/supabase';

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ D√©but de la confirmation d\'import...');
    
    if (!supabaseAdmin) {
      throw new Error('Configuration Supabase admin manquante');
    }
    
    const body = await request.json();
    const { 
      orderData,
      productsExistingWithGoodStock,
      productsToUpdateStock,
      productsToCreate,
      addToCatalog,
      userId 
    } = body;

    console.log('üìã Donn√©es re√ßues:');
    console.log('- Produits existants OK:', productsExistingWithGoodStock?.length || 0);

    console.log('- Produits √† cr√©er:', productsToCreate?.length || 0);
    console.log('- Ajouter au catalogue:', addToCatalog);

    // 1. METTRE √Ä JOUR LES STOCKS si demand√©
    if (addToCatalog && productsToUpdateStock && productsToUpdateStock.length > 0) {
      console.log('üì¶ Mise √† jour des stocks...');
      
      for (const product of productsToUpdateStock) {
        try {
          const { error: updateError } = await supabaseAdmin
            .from('products')
            .update({ 
              quantity: product.new_stock,
              price_dbc: product.dbc_price 
            })
            .eq('sku', product.sku);

          if (updateError) {
            console.error(`‚ùå Erreur mise √† jour stock ${product.sku}:`, updateError);
          } else {
            console.log(`‚úÖ Stock mis √† jour pour ${product.sku}: ${product.new_stock}`);
          }
        } catch (error) {
          console.error(`‚ùå Erreur mise √† jour ${product.sku}:`, error);
        }
      }
    }

    // 2. CR√âER LES NOUVEAUX PRODUITS si demand√©
    let newlyAddedProducts = [];
    if (addToCatalog && productsToCreate && productsToCreate.length > 0) {
      console.log('‚ûï Cr√©ation des nouveaux produits...');
      
      const productsToInsert = productsToCreate.map((product: any) => ({
        sku: product.sku,
        item_group: 'Mobiles',
        product_name: product.product_name,
        appearance: product.appearance || 'Grade A',
        functionality: product.functionality || '100%',
        boxed: product.boxed || 'Non renseign√©',
        color: product.color || null,
        cloud_lock: null,
        additional_info: product.additional_info || null,
        quantity: product.quantity,
        price: product.supplier_price,
        campaign_price: null,
        vat_type: product.vat_type || 'Non marginal',
        price_dbc: product.dbc_price,
        is_active: true
      }));

      // V√©rifier d'abord quels produits existent d√©j√† pour √©viter les doublons
      console.log('üîç V√©rification des doublons avant insertion...');
      const skusToCreate = productsToInsert.map((p: any) => p.sku);
      
      const { data: existingProducts, error: checkError } = await supabaseAdmin
        .from('products')
        .select('sku')
        .in('sku', skusToCreate);

      if (checkError) {
        console.warn('‚ö†Ô∏è Erreur v√©rification doublons:', checkError);
      }

      const existingSkus = new Set(existingProducts?.map((p: any) => p.sku) || []);
      const productsToActuallyInsert = productsToInsert.filter((p: any) => !existingSkus.has(p.sku));
      
      console.log(`üìä R√©sultat v√©rification doublons:`);
      console.log(`- Produits √† cr√©er: ${productsToInsert.length}`);
      console.log(`- Produits d√©j√† existants: ${existingSkus.size}`);
      console.log(`- Produits √† r√©ellement ins√©rer: ${productsToActuallyInsert.length}`);

      if (existingSkus.size > 0) {
        console.log('‚ö†Ô∏è Produits d√©tect√©s comme existants:', Array.from(existingSkus));
      }

      if (productsToActuallyInsert.length > 0) {
        try {
          const { data: insertedProducts, error: insertError } = await supabaseAdmin
            .from('products')
            .insert(productsToActuallyInsert)
            .select('sku, product_name');

          if (insertError) {
            console.error('‚ùå Erreur insertion produits:', insertError);
            
            // Si c'est encore une erreur de contrainte unique, essayer d'ins√©rer un par un
            if (insertError.code === '23505') { // Contrainte unique viol√©e
              console.log('üîÑ Tentative d\'insertion individuelle...');
              newlyAddedProducts = [];
              
              for (const product of productsToActuallyInsert) {
                try {
                  const { data: singleInsert, error: singleError } = await supabaseAdmin
                    .from('products')
                    .insert([product])
                    .select('sku, product_name');

                  if (singleError) {
                    if (singleError.code === '23505') {
                      console.log(`‚ö†Ô∏è Produit ${product.sku} existe d√©j√†, ignor√©`);
                    } else {
                      console.error(`‚ùå Erreur insertion ${product.sku}:`, singleError);
                    }
                  } else if (singleInsert && singleInsert.length > 0) {
                    newlyAddedProducts.push(singleInsert[0]);
                    console.log(`‚úÖ Produit ${product.sku} cr√©√© individuellement`);
                  }
                } catch (singleProductError) {
                  console.error(`‚ùå Erreur produit individuel ${product.sku}:`, singleProductError);
                }
              }
              
              console.log(`‚úÖ ${newlyAddedProducts.length} produits cr√©√©s avec insertion individuelle`);
            } else {
              throw new Error(`Erreur lors de la cr√©ation des produits: ${insertError.message}`);
            }
          } else {
            newlyAddedProducts = insertedProducts || [];
            console.log(`‚úÖ ${newlyAddedProducts.length} nouveaux produits cr√©√©s en batch`);
          }
        } catch (error) {
          console.error('‚ùå Erreur cr√©ation produits:', error);
          throw error;
        }
      } else {
        console.log('‚ÑπÔ∏è Aucun nouveau produit √† cr√©er (tous existent d√©j√†)');
        newlyAddedProducts = [];
      }
    }

    // 3. PR√âPARER LES DONN√âES DE COMMANDE
    console.log('üìù Pr√©paration de la commande...');
    
    // Tous les produits pour la commande
    const allOrderProducts = [
      ...productsExistingWithGoodStock,
      ...productsToUpdateStock,
      ...productsToCreate
    ];

    if (allOrderProducts.length === 0) {
      throw new Error('Aucun produit √† commander');
    }

    // Calculer les totaux
    const totalAmount = allOrderProducts.reduce((sum, product) => 
      sum + (product.dbc_price * product.quantity), 0
    );

    const totalItems = allOrderProducts.reduce((sum, product) => 
      sum + product.quantity, 0
    );

    const fileName = orderData.fileName || 'commande_importee';
    const orderName = `Import ${fileName} - ${new Date().toLocaleDateString('fr-FR')}`;

    // 4. CR√âER LA COMMANDE EN BROUILLON
    console.log('üìã Cr√©ation de la commande en base...');
    
    const orderForSupabase: any = {
      name: orderName,
      status: 'draft' as const,
      status_label: 'Brouillon',
      total_amount: Math.round(totalAmount * 100) / 100,
      total_items: totalItems,
      customer_ref: 'IMPORT-AUTO',
      vat_type: 'Bien d\'occasion - TVA calcul√©e sur la marge'
    };

    // Ajouter le user_id si fourni
    if (userId) {
      orderForSupabase.user_id = userId;
    }

    const { data: insertedOrder, error: orderError } = await supabaseAdmin
      .from('orders')
      .insert([orderForSupabase])
      .select()
      .single();

    if (orderError) {
      console.error('‚ùå Erreur cr√©ation commande:', orderError);
      throw new Error(`Erreur cr√©ation commande: ${orderError.message}`);
    }

    console.log('‚úÖ Commande cr√©√©e:', insertedOrder.id);

    // 5. AJOUTER LES ITEMS DE COMMANDE
    console.log('üì¶ Ajout des items de commande...');
    
    const orderItemsData = allOrderProducts.map(product => ({
      order_id: insertedOrder.id,
      sku: product.sku,
      product_name: product.product_name,
      quantity: product.quantity,
      unit_price: product.dbc_price,
      total_price: product.dbc_price * product.quantity
    }));

    const { error: itemsError } = await supabaseAdmin
      .from('order_items')
      .insert(orderItemsData);

    if (itemsError) {
      console.error('‚ùå Erreur ajout items:', itemsError);
      // Ne pas faire √©chouer pour √ßa, juste avertir
      console.warn('‚ö†Ô∏è Items non ajout√©s mais commande cr√©√©e');
    } else {
      console.log(`‚úÖ ${orderItemsData.length} items ajout√©s √† la commande`);
    }

    // 6. PR√âPARER LA R√âPONSE
    const response = {
      success: true,
      order: {
        id: insertedOrder.id,
        name: insertedOrder.name,
        status: insertedOrder.status,
        status_label: insertedOrder.status_label,
        total_amount: insertedOrder.total_amount,
        total_items: insertedOrder.total_items,
        created_at: insertedOrder.created_at
      },
      summary: {
        totalProducts: allOrderProducts.length,
        existingProducts: productsExistingWithGoodStock.length,
        updatedProducts: productsToUpdateStock.length,
        createdProducts: newlyAddedProducts.length,
        catalogUpdated: addToCatalog,
        totalAmount: Math.round(totalAmount * 100) / 100,
        totalItems
      },
      message: `Commande "${orderName}" cr√©√©e avec succ√®s. ${allOrderProducts.length} produits, ${addToCatalog ? newlyAddedProducts.length + ' cr√©√©s et ' + productsToUpdateStock.length + ' mis √† jour dans le catalogue.' : 'sans modification du catalogue.'}`
    };

    console.log('‚úÖ Import termin√© avec succ√®s:', response.summary);
    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå Erreur lors de la confirmation d\'import:', error);
    return NextResponse.json(
      { 
        success: false,
        error: error instanceof Error ? error.message : 'Erreur interne',
        details: error instanceof Error ? error.stack : undefined
      },
      { status: 500 }
    );
  }
} 