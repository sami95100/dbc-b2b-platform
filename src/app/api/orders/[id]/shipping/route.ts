import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '../../../../../lib/supabase';

// Fonction helper pour v√©rifier supabaseAdmin
function getSupabaseAdmin() {
  if (!supabaseAdmin) {
    throw new Error('Configuration Supabase admin manquante - v√©rifiez SUPABASE_SERVICE_ROLE_KEY dans .env.local');
  }
  return supabaseAdmin;
}

export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const admin = getSupabaseAdmin();
    console.log('üöö Mise √† jour livraison pour commande:', params.id);

    const body = await request.json();
    const { tracking_number, shipping_cost, status } = body;

    // Si on passe directement au statut completed, le tracking number n'est pas obligatoire
    if (!tracking_number && status !== 'completed') {
      return NextResponse.json({ error: 'Num√©ro de tracking requis' }, { status: 400 });
    }

    // V√©rifier que la commande existe
    const { data: order, error: orderError } = await admin
      .from('orders')
      .select('id, name, status, total_amount')
      .eq('id', params.id)
      .single();

    if (orderError || !order) {
      return NextResponse.json({ error: 'Commande non trouv√©e' }, { status: 404 });
    }

    // V√©rifier que la commande est dans un statut permettant la mise √† jour
    const allowedStatuses = ['pending', 'shipping'];
    if (!allowedStatuses.includes(order.status)) {
      return NextResponse.json({ 
        error: `Impossible de mettre √† jour la livraison. Statut actuel: ${order.status}. Statuts autoris√©s: ${allowedStatuses.join(', ')}` 
      }, { status: 400 });
    }

    // Pr√©parer les donn√©es de mise √† jour
    const updateData: any = {
      updated_at: new Date().toISOString()
    };

    // Stocker le tracking_number dans customer_ref comme solution temporaire
    if (tracking_number) {
      updateData.customer_ref = `TRACKING:${tracking_number}`;
    }

    // G√©rer les transitions de statut
    if (status) {
      if (status === 'shipping' && order.status === 'pending') {
        // Transition pending -> shipping (avec tracking)
        updateData.status = 'shipping';
        updateData.status_label = 'En cours de livraison';
      } else if (status === 'completed') {
        // Transition vers completed (depuis pending ou shipping)
        updateData.status = 'completed';
        updateData.status_label = 'Termin√©e';
      }
    } else if (tracking_number && order.status === 'pending') {
      // Si on ajoute un tracking √† une commande pending, passer en shipping
      updateData.status = 'shipping';
      updateData.status_label = 'En cours de livraison';
    }

    // Mettre √† jour la commande
    const { data: updatedOrder, error: updateError } = await admin
      .from('orders')
      .update(updateData)
      .eq('id', params.id)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour commande:', updateError);
      return NextResponse.json({ 
        error: `Erreur lors de la mise √† jour: ${updateError.message}` 
      }, { status: 500 });
    }

    console.log('‚úÖ Livraison mise √† jour avec succ√®s');

    const message = status === 'completed' && !tracking_number 
      ? 'Commande marqu√©e comme termin√©e avec succ√®s'
      : 'Informations de livraison mises √† jour avec succ√®s';

    return NextResponse.json({
      success: true,
      message,
      order: updatedOrder,
      tracking_number: tracking_number || null
    });

  } catch (error) {
    console.error('‚ùå Erreur mise √† jour livraison:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Erreur interne' },
      { status: 500 }
    );
  }
} 